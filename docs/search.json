[{"path":"/articles/VisiumVersion3.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Unlocking single cell spatial omics analyses with scdney - Visium","text":"single cell technology advances, recent development spatial omics allows us examine spatial organisation cells within tissues native environment. case study discuss challenges analytical focus associated using multi-sample spatial datasets disease risk prognosis. also talk general analytical strategies critical thinking questions arise workflow. Note: data analysis workshop offers participants opportunity engage hands-analysis using R. However, comfortable coding R, can still acquire valuable interpretation skills reviewing output provide file.","code":""},{"path":"/articles/VisiumVersion3.html","id":"preparation-and-assumed-knowledge","dir":"Articles","previous_headings":"Overview","what":"Preparation and assumed knowledge","title":"Unlocking single cell spatial omics analyses with scdney - Visium","text":"Knowledge R syntax Familiarity SingleCellExperiment class Basic knowledge single cell data analysis. can access previous workshops quick review single cell data analysis. Ability install required R packages, please check sessionInfo end document ensure using correct version. Familiarity previous workshop vignette Introduction Single Cell RNA-seq Analysis","code":""},{"path":"/articles/VisiumVersion3.html","id":"learning-objectives","dir":"Articles","previous_headings":"Overview","what":"Learning objectives","title":"Unlocking single cell spatial omics analyses with scdney - Visium","text":"Describe visualise spatial omics datasets Calculate different measures describe spatial distribution cell types Generate individual feature representations cell-level expression matrix Perform multi-view disease outcome prognosis package ClassifyR assess performance classification survival models identify assess individual performance given survival model. Explore various strategies disease outcome prognosis using spatial omics data","code":""},{"path":"/articles/VisiumVersion3.html","id":"time-outline","dir":"Articles","previous_headings":"Overview","what":"Time outline","title":"Unlocking single cell spatial omics analyses with scdney - Visium","text":"Structure 3-hour workshop:","code":""},{"path":[]},{"path":"/articles/VisiumVersion3.html","id":"data-and-background","dir":"Articles","previous_headings":"Initial exploration and visualisation","what":"Data and background","title":"Unlocking single cell spatial omics analyses with scdney - Visium","text":"demo, look Visium dataset taken Kuppe, C., Ramirez Flores, R. O., Li, Z., Hayat, S., Levinson, R. T., Liao, X., … & Kramann, R. (2022). Spatial multi-omic map human myocardial infarction. Nature, 608(7924), 766-777. Visium captures spatial information, creating images display distribution different cell types associated gene expression patterns tissue. dataset, authors quantified expression >10000 genes control patients myocardial infarction. demo, examine patients defined myogenic group ischaemic group. myogenic group defined samples taken control unaffected remote zone, ischaemic group defined samples taken ischaemic zone.","code":""},{"path":"/articles/VisiumVersion3.html","id":"exploration-1-how-complex-is-my-data","dir":"Articles","previous_headings":"Initial exploration and visualisation","what":"Exploration 1: How complex is my data ?","title":"Unlocking single cell spatial omics analyses with scdney - Visium","text":"code examine data objects: - dataset contains 11681 genes 19000 cells (subsampling). - outcome 11 myogenic samples (4 control, 7 remote zone) 8 ischaemic samples.","code":"data_sce <- readRDS(\"~/biocasia_data/small_data.rds\")   data_sce ## class: SpatialExperiment  ## dim: 11681 19000  ## metadata(3240): X_approximate_distribution X_normalization ... ##   schema_version title ## assays(2): X logcounts ## rownames(11681): LINC01409 LINC01128 ... VAMP7 AC007325.4 ## rowData names(1): features ## colnames(19000): ACAGAACTGAGAACAA-1 TTGCCCTGATCACGGG-1 ... ##   CTGACATAGAAATAGA-1.16 ATTAGGCGATGCTTTC-1.24 ## colData names(33): n_counts n_genes ... number_cells condition ## reducedDimNames(3): X_pca X_spatial X_umap ## mainExpName: NULL ## altExpNames(0): ## spatialCoords names(0) : ## imgData names(1): sample_id ## Expression matrix is stored in genes by cells matrix logcounts(data_sce)[1:7, 1:7] ## 7 x 7 sparse Matrix of class \"dgCMatrix\" ##           ACAGAACTGAGAACAA-1 TTGCCCTGATCACGGG-1 CATATAGGTACAGTCA-1 ## LINC01409           .                  .                  .        ## LINC01128           1.431438           .                  1.351835 ## NOC2L               .                  .                  .        ## KLHL17              .                  .                  .        ## HES4                .                  .                  .        ## ISG15               .                  1.279462           .        ## AGRN                .                  .                  .        ##           TGCGAGAATATTACCC-1 TATTCAATTCTAATCC-1 GTCCTATTGTTGTGGT-1 ## LINC01409           .                  .                  .        ## LINC01128           .                  .                  .        ## NOC2L               .                  .                  .        ## KLHL17              .                  .                  .        ## HES4                1.146986           1.389528           .        ## ISG15               .                  .                  1.454652 ## AGRN                .                  .                  .        ##           TAACCTACCGTCCGAG-1 ## LINC01409           .        ## LINC01128           .        ## NOC2L               .        ## KLHL17              .        ## HES4                .        ## ISG15               1.475897 ## AGRN                . ## The object stores meta data (such as patient outcome information) about each cell ## the metadata is stored in colData() for a spatialexperiment object. # we need to convert to a data.frame to be input into datatable function DT::datatable( data.frame(colData(data_sce))[1:5, ], options = list(scrollX = TRUE))"},{"path":"/articles/VisiumVersion3.html","id":"exploration-2-how-to-visualise-my-data","dir":"Articles","previous_headings":"Initial exploration and visualisation","what":"Exploration 2: How to visualise my data?","title":"Unlocking single cell spatial omics analyses with scdney - Visium","text":"Typically spatial data, perform dimension reduction reduce project high dimensional cell gene matrix onto 2D space. allows us visualise various things interest, distribution cell types disease outcomes. Visium spot-based technology, meaning spot captures 1-10 cells. Therefore spot may represent mixture cells different cell types. dataset, author used cell2location spatial deconvolution tool predict cell type probability composition spot. also many deconvolution tools available, eg, CARD published Ma, Y., & Zhou, X. (2022). Spatially informed cell-type deconvolution spatial transcriptomics. Nature biotechnology, 40(9), 1349-1359. demonstration purposes, plot visualise spot using cell type maximum probability. Remember, focus identify interesting patterns plot.  Critical Thinking Q: Q1: patient batch effect? Q2: myogenic group ischaemic group easy difficult distinguish?","code":"## Perform UMP calculation data_sce <- runUMAP(data_sce, exprs_values = \"logcounts\", scale=TRUE, min_dist = 0.3)  ## Visualize UMAP and highlight variable of interest a <- plotUMAP(data_sce, colour_by = \"celltype\") b <- plotUMAP(data_sce, colour_by = \"condition\") c <- plotUMAP(data_sce, colour_by = \"sample\")  ## Combine multiple plot in a grid format  ggarrange(plotlist = list(a,b,c))"},{"path":"/articles/VisiumVersion3.html","id":"exploration-3-is-there-spatial-structure-in-my-data","dir":"Articles","previous_headings":"Initial exploration and visualisation","what":"Exploration 3: Is there spatial structure in my data?","title":"Unlocking single cell spatial omics analyses with scdney - Visium","text":"advantage spatial omics can examine organisation cell types occurs tissue slide. , visualise one slides patient. optional exercise, can: - permute cell type label, - permute spatial coordinate. give sense random ordering. code set consistent colour cell type throughout rmarkdown. use colour palette Tableau 10 colours 11 cell types, colour last cell type grey.","code":"# SET UP code for visualising  celltype <- c(\"Adipocyte\" , \"Cardiomyocyte\" ,                \"Endothelial\" ,  \"Fibroblast\" , \"Lymphoid\" ,                   \"Mast\" ,   \"Myeloid\" ,                \"Neuronal\" , \"Pericyte\" , \"Cycling.cells\", \"vSMCs\" )  tableau_palette <- scale_colour_tableau()  color_codes <-  c( tableau_palette$palette(10) , \"lightgrey\") names(color_codes) <- celltype"},{"path":"/articles/VisiumVersion3.html","id":"spatial-plot","dir":"Articles","previous_headings":"Initial exploration and visualisation > Exploration 3: Is there spatial structure in my data?","what":"Spatial plot","title":"Unlocking single cell spatial omics analyses with scdney - Visium","text":"select particular patient “IZ_P9_cond_Ischaemic” (patient ischaemic group) visualise spatial pattern using ggplot.","code":"# select one sample to visualise   one_sample_data <- data_sce[, data_sce$sample  ==  \"IZ_P9_cond_Ischaemic\"] one_sample  <- data.frame( colData(one_sample_data) ) a <- ggplot(one_sample, aes(x = spatial_x , y = spatial_y, colour = celltype)) + geom_point(alpha=0.7) +  scale_colour_manual(values = color_codes) + ggtitle(\"Original slide\") a"},{"path":"/articles/VisiumVersion3.html","id":"optional-code-random-spatial-pattern","dir":"Articles","previous_headings":"Initial exploration and visualisation > Exploration 3: Is there spatial structure in my data?","what":"[Optional code] Random spatial pattern","title":"Unlocking single cell spatial omics analyses with scdney - Visium","text":"code investigates permutations spatially resolved data. Please examine next tab actual results.","code":"## Optional: Permute the cell type labels  one_sample$celltype_permute <- sample(one_sample$celltype) b <- ggplot(one_sample, aes(x = spatial_x , y =  spatial_y, colour =celltype_permute)) + geom_point(alpha=0.7) +  scale_colour_manual(values = color_codes)  + ggtitle(\"Permute the cell type label\") ## Optional: Permute the spatial coordinate  one_sample$spatial_x_permute <- sample(one_sample$spatial_x) one_sample$spatial_y_permute <- sample(one_sample$spatial_y)  c <- ggplot(one_sample, aes(x = spatial_x_permute , y = spatial_y_permute, colour = celltype)) + geom_point(alpha=0.7) +  scale_colour_manual(values = color_codes) + ggtitle(\"Permute the X, Y coordinate\")"},{"path":"/articles/VisiumVersion3.html","id":"spatial-structure","dir":"Articles","previous_headings":"Initial exploration and visualisation > Exploration 3: Is there spatial structure in my data?","what":"Spatial structure","title":"Unlocking single cell spatial omics analyses with scdney - Visium","text":"aim understanding concept spatial randomness. Spatial statistics topic study encompasses wide range research. next two code chucks focus examination two distinct permutation strategies. objective investigation gain understanding various permutation strategies might yield varied perceptions randomness.","code":"ggarrange(plotlist = list(a,b,c), ncol =3 )"},{"path":"/articles/VisiumVersion3.html","id":"exploration-4-visium-specific-visualisation","dir":"Articles","previous_headings":"Initial exploration and visualisation","what":"Exploration 4: Visium specific visualisation","title":"Unlocking single cell spatial omics analyses with scdney - Visium","text":"Instead plotting cell type maximum probability, can also visualise cell type composition spot using pie chart.  Critical Thinking Q: Q3: structure data cell type randomly distribution?","code":"x <- data.frame( imagecol = one_sample$spatial_y,                   imagerow = one_sample$spatial_x)   rownames(x) <- paste0(\"Spot\", 1:nrow(x))  y <- data.frame( colData(one_sample_data)[ ,celltype  ] )   rownames(y) <- paste0(\"Spot\", 1:nrow(y))   ## we use a function to plot the piechart plotSpatialScatterpie(x = x, y = y , pie_scale = 0.7) + theme_classic() +  scale_fill_manual(values = color_codes) + ylab(\"spatial_y\") + xlab(\"spatial_y\")"},{"path":[]},{"path":"/articles/VisiumVersion3.html","id":"do-cell-type-co-localise-in-specfic-regions","dir":"Articles","previous_headings":"Describing tissue microenvrionments and cellular neighbourhoods","what":"Do cell type co-localise in specfic regions?","title":"Unlocking single cell spatial omics analyses with scdney - Visium","text":"Spatial data allow identification variety characteristics, including distinct cell types within image, provide overview tissue environment. allows scientists explore cellular architecture environment association phenotype information (e.g meta-data). data story, interested whether ischaemic myogenic individuals different. section, examine graphically cell-type co-localisation varies across spatial regions information associated disease conditions. many packages perform task. , use lisaClust function [https://www.bioconductor.org/packages/devel/bioc/html/lisaClust.html] based “local L-function” spatially cluster cells different regions similar cell type compositions.","code":"set.seed(51773)   BPPARAM <- simpleSeg:::generateBPParam(2)  # Cluster cells into spatial regions with similar composition. data_sce  <- lisaClust(   data_sce ,   k = 5,   Rs = c(20, 50, 100),   sigma = 50,   spatialCoords = c(\"spatial_x\", \"spatial_y\"),   cellType = \"celltype\",   imageID = \"sample\" ,   regionName = \"region\",   BPPARAM = BPPARAM )"},{"path":"/articles/VisiumVersion3.html","id":"which-regions-appear-to-be-different-between-the-ischaemic-and-myogenic-patients","dir":"Articles","previous_headings":"Describing tissue microenvrionments and cellular neighbourhoods","what":"Which regions appear to be different between the ischaemic and myogenic patients?","title":"Unlocking single cell spatial omics analyses with scdney - Visium","text":"use lisaClust function previous subsection cluster cells five different spatial regions. Next, case study, compare individuals ischaemic myogenic disease examine graphically, regions appear different disease conditions.","code":""},{"path":"/articles/VisiumVersion3.html","id":"individual-level","dir":"Articles","previous_headings":"Describing tissue microenvrionments and cellular neighbourhoods > Which regions appear to be different between the ischaemic and myogenic patients?","what":"Individual level","title":"Unlocking single cell spatial omics analyses with scdney - Visium","text":", visualise spatial domain (region) detection result based one individual. can either visualise regions one graph highlight region separate graphs. use terminology “spatial domain” “regions” interchangeably. Depending number regions, may useful visualise spatial regions either collectively single graph separately multiple graphs. visualise single graph, hatchingPlot() function used create hatching patterns represent spatial regions cell-types. hatching geom used create hatching patterns represent spatial regions.  written small function draw_region_clustering_result visualise data separately multiple graphs individual IZ_P9_cond_Ischaemic.","code":"## To visualise it in a single graph hatchingPlot(   data_sce,   useImages = \"IZ_P9_cond_Ischaemic\",    region = \"region\",   imageID = \"sample\",   cellType = \"celltype\",   spatialCoords = c(\"spatial_x\", \"spatial_y\") ) draw_region_clustering_result(data_sce ,                                sample = \"sample\" ,                                selected_sample =  \"IZ_P9_cond_Ischaemic\" ) ## [[1]] ##  ## [[2]]"},{"path":"/articles/VisiumVersion3.html","id":"across-individuals","dir":"Articles","previous_headings":"Describing tissue microenvrionments and cellular neighbourhoods > Which regions appear to be different between the ischaemic and myogenic patients?","what":"Across individuals","title":"Unlocking single cell spatial omics analyses with scdney - Visium","text":"can better interpret region outputs summarising proportion cell type region across individuals.  Critical Thinking Q: Q4: regions focus next? [optional] complex graphical options using ggplot  Critical Thinking Q: Q5: conclusion change looking different plot?","code":"draw_dotplot(data_sce,                sample = \"sample\" ,               celltype = \"celltype\" ,                group= \"condition\" ,               group_of_interest =  c(\"Myogenic\" , \"Ischaemic\")) df <- data.frame(colData( data_sce))  df <- df %>% dplyr::group_by(sample , condition , region) %>%   count(celltype) %>%   mutate(proportion = n / sum(n))   ggplot(df, aes(y = proportion, x = sample , fill = celltype))+ geom_col()+facet_grid(~region+condition, scales = \"free\", space = \"free\" ) + scale_fill_manual(values = c(color_codes))  +   theme(axis.title.x=element_blank(),         axis.text.x=element_blank(),         axis.ticks.x=element_blank())"},{"path":"/articles/VisiumVersion3.html","id":"further-exploration-by-visualising-selected-regions","dir":"Articles","previous_headings":"Describing tissue microenvrionments and cellular neighbourhoods > Which regions appear to be different between the ischaemic and myogenic patients?","what":"Further exploration by visualising selected regions","title":"Unlocking single cell spatial omics analyses with scdney - Visium","text":"number sub-cell types increase considerably want add spatial domain (region) information. enhance clarity facilitate understanding, may helpful choose predetermined region. code generates set boxplots enable comparison cell type proportions individuals ischaemic myogenic conditions region_2.  Discussion: Comparing cell-type compositions region, can tell regions?","code":"draw_selected_region_boxplot(data_sce,                                sample = \"sample\",                                celltype = \"celltype\" ,                                 group= \"condition\" ,                                group_of_interest =  c(\"Myogenic\" , \"Ischaemic\") ,                               select_region = \"region_2\" )"},{"path":"/articles/VisiumVersion3.html","id":"how-do-we-generate-molecular-representations-for-each-individual","dir":"Articles","previous_headings":"","what":"How do we generate molecular representations for each individual?","title":"Unlocking single cell spatial omics analyses with scdney - Visium","text":"workshop, use scFeatures generate molecular representations patient. molecular representation interpretable hence facilitates downstream analysis patient. Overall, scFeatures generates features across six categories representing different molecular views cellular characteristics. include: - ) cell type proportions - ii) cell type specific gene expressions - iii) cell type specific pathway expressions - iv) cell type specific cell-cell interaction (CCI) scores - v) overall aggregated gene expressions - vi) spatial metrics different types features constructed enable comprehensive multi-view understanding patient matrix spots x cells. Discussion: samples cell types like remove data?","code":"print(\"number of cells in each sample\") ## [1] \"number of cells in each sample\" table(data_sce$sample) ##  ##  control_P1_cond_Myogenic control_P17_cond_Myogenic  control_P7_cond_Myogenic  ##                      1000                      1000                      1000  ##  control_P8_cond_Myogenic     IZ_P10_cond_Ischaemic     IZ_P13_cond_Ischaemic  ##                      1000                      1000                      1000  ##     IZ_P15_cond_Ischaemic     IZ_P16_cond_Ischaemic      IZ_P2_cond_Ischaemic  ##                      1000                      1000                      1000  ##      IZ_P3_cond_Ischaemic      IZ_P9_cond_Ischaemic IZ_P9_rep2_cond_Ischaemic  ##                      1000                      1000                      1000  ##      RZ_P11_cond_Myogenic      RZ_P12_cond_Myogenic       RZ_P2_cond_Myogenic  ##                      1000                      1000                      1000  ##       RZ_P3_cond_Myogenic       RZ_P5_cond_Myogenic       RZ_P6_cond_Myogenic  ##                      1000                      1000                      1000  ##       RZ_P9_cond_Myogenic  ##                      1000 # metadata <- data.frame( table(data_sce$sample) ) # colnames(metadata)[1] <- \"Patient\" # DT::datatable(metadata , options = list(pageLength = 5), width = \"400px\")  print(\"number of cells in each celltype\") ## [1] \"number of cells in each celltype\" table(data_sce$celltype) ##  ## Cardiomyocyte Cycling.cells   Endothelial    Fibroblast          Mast  ##          8782          1755          1878          3714            41  ##       Myeloid      Pericyte         vSMCs      Lymphoid      Neuronal  ##          2421            44           266            40            34  ##     Adipocyte  ##            25 # metadata <- data.frame( table(data_sce$celltype) ) # colnames(metadata)[1] <- \"Region specific cell type\" # DT::datatable(metadata , options = list(pageLength = 5), width = \"400px\") #"},{"path":"/articles/VisiumVersion3.html","id":"how-to-create-molecular-representations-of-individuals","dir":"Articles","previous_headings":"How do we generate molecular representations for each individual?","what":"How to create molecular representations of individuals ?","title":"Unlocking single cell spatial omics analyses with scdney - Visium","text":"different ways can use scFeatures generate molecular representations individuals requires following information spatial data. data, sample, X coordinates, Y coordinates, feature_types, type total 13 different types features (feature_types) can choose generate. arugment type refers type input data . either scrna (single-cell RNA-sequencing data), spatial_p (spatial proteomics data), spatial_t (single-cell spatial data).","code":""},{"path":"/articles/VisiumVersion3.html","id":"calculate-feature_types","dir":"Articles","previous_headings":"How do we generate molecular representations for each individual? > How to create molecular representations of individuals ?","what":"Calculate feature_types","title":"Unlocking single cell spatial omics analyses with scdney - Visium","text":"Suppose interested determining proportion cell type individual within region. necessary specify type = spatial_t reflect Visum data feature_types = proportion_raw indicate intend calculate cell type proportion region-specific sub-cell types. generated feature matrix samples x features, code shows compositional plot individuals","code":"## [A] The next few lines extract specific information from data_sce as input to scFeatures.   ## Extract the expression matrix from data_sce data <- logcounts( data_sce )  ## Extract the sample information  sample <- data_sce$sample  ## Extract the x, y coordiantes spatialCoords <- list(data_sce$spatial_x, data_sce$spatial_y)   # For spatial transcriptomics, we need to specify the cell type prediction of each spot prediction.scores <- colData(data_sce)[, celltype] prediction.scores <- as.matrix( t(prediction.scores)  )  ### [B] Running scFeatures scfeatures_result <- scFeatures(data = data ,                                   sample = sample,                                  spatialCoords = spatialCoords,                                  spotProbability = prediction.scores,                                  feature_types = \"proportion_raw\",                                 type =\"spatial_t\" ) feature <- scfeatures_result$proportion_raw plot_barplot( feature ) + ggtitle(\"Proportion raw feature\")"},{"path":"/articles/VisiumVersion3.html","id":"all-cell-types-and-features-in-one-line-of-code","dir":"Articles","previous_headings":"How do we generate molecular representations for each individual? > How to create molecular representations of individuals ?","what":"All cell types and features in one line of code","title":"Unlocking single cell spatial omics analyses with scdney - Visium","text":"code enable us generate feature types cell types line. Due limitations today’s computational capacity, ** Please run today’s workshop, crash system**.","code":"scfeatures_result <- scFeatures(data = data ,                                   sample = sample,                                  spatialCoords = spatialCoords ,                                  spotProbability = prediction.scores,                                  type =\"spatial_t\",                                  ncores = 10) scfeatures_result <- readRDS(\"~/biocasia_data/scfeatures_result_matrix.rds\")"},{"path":"/articles/VisiumVersion3.html","id":"what-can-we-learn-from-the-outputs-from-scfeatures","dir":"Articles","previous_headings":"How do we generate molecular representations for each individual?","what":"What can we learn from the outputs from scFeatures?","title":"Unlocking single cell spatial omics analyses with scdney - Visium","text":"Assuming already generated collection molecular representations individuals. Please load prepared RDS file scfeatures_result_matrix.rds. , can remind generated feature types stored matrix samples x features.","code":"# Upload pre-generated RDS file scfeatures_result <- readRDS(\"~/biocasia_data/scfeatures_result_matrix.rds\")   # We have generated a total of 13 types of feature categories names(scfeatures_result) ##  [1] \"proportion_raw\"       \"proportion_logit\"     \"proportion_ratio\"     ##  [4] \"gene_mean_celltype\"   \"pathway_mean\"         \"gene_mean_bulk\"       ##  [7] \"gene_prop_bulk\"       \"gene_cor_bulk\"        \"L_stats\"              ## [10] \"celltype_interaction\" \"morans_I\"             \"nn_correlation\" # What is the number of features that we have generated  lapply(scfeatures_result, dim) ## $proportion_raw ## [1] 19 11 ##  ## $proportion_logit ## [1] 19 11 ##  ## $proportion_ratio ## [1] 19 55 ##  ## $gene_mean_celltype ## [1]    19 33561 ##  ## $pathway_mean ## [1]  19 550 ##  ## $gene_mean_bulk ## [1]   19 3051 ##  ## $gene_prop_bulk ## [1]   19 3051 ##  ## $gene_cor_bulk ## [1]    19 60031 ##  ## $L_stats ## [1]  19 121 ##  ## $celltype_interaction ## [1]  19 121 ##  ## $morans_I ## [1]   19 3051 ##  ## $nn_correlation ## [1]   19 3051"},{"path":"/articles/VisiumVersion3.html","id":"association-study---can-we-identify-differential-expression-for-a-feature-of-interest","dir":"Articles","previous_headings":"How do we generate molecular representations for each individual? > What can we learn from the outputs from scFeatures?","what":"Association study - can we identify “differential expression” for a feature of interest","title":"Unlocking single cell spatial omics analyses with scdney - Visium","text":"R object scfeatures_result contains variety features. important question focuses identification features reflect association prognostic outcome, specifically distinguishing disease conditions. code provided demonstrates use limma() function fit linear model purpose analysing gene_mean_celltype illustration feature. feature type known gene_mean_celltype represents mean gene expression sub-cell type specific spatial region. visualise comparison using volcano plot dotplot cell type specific expression feature. type scatter-plot used quickly identify changes large data sets represent significance (y-axis) versus effect size fold-change (x-axis).  Critical Thinking Q: Q6: figure prefer? volcano plot dotplot?","code":"# Extract cell type specific gene expression for all regions.  gene_mean_bulk <- scfeatures_result$gene_mean_bulk  # this transposes the data  # in bioinformatics convention, features are stored in rows  # in statistics convention, features are stored in columns gene_mean_bulk <- t(gene_mean_bulk)         # Extract the two conditions of interest - disease condition condition  <- unlist( lapply( strsplit( colnames(gene_mean_bulk), \"_cond_\"), `[`, 2)) condition <- data.frame(condition = condition )  # Calculate log fold change each gene using limma design <- model.matrix(~condition, data = condition) fit <- lmFit(gene_mean_bulk, design) fit <- eBayes(fit) tT <- topTable(fit, n = Inf) tT$gene <- rownames(tT) p1 <- ggplot( tT , aes(logFC,-log10(P.Value) , text = gene ) )+       geom_point(aes(colour=-log10(P.Value)), alpha=1/3, size=1) +       scale_colour_gradient(low=\"blue\",high=\"red\")+       xlab(\"log2 fold change\") + ylab(\"-log10 p-value\")    tT <- tT[ order(tT$logFC, decreasing = T), ] tT <- tT[1:20, ] p2 <- ggplot( tT , aes( y = reorder(gene, logFC) , x = logFC  ) )+       geom_point(aes(colour=-log10(P.Value)), alpha=1/3, size=4) +       scale_colour_gradient(low=\"blue\",high=\"red\")+       xlab(\"logFC\") + ylab(\"region specific cel type specfic features\" )    ggarrange(plotlist = list(p1,p2))"},{"path":"/articles/VisiumVersion3.html","id":"can-we-identify-feature-of-interest-among-each-types-of-feature-category","dir":"Articles","previous_headings":"How do we generate molecular representations for each individual? > What can we learn from the outputs from scFeatures?","what":"Can we identify feature of interest among each types of feature category?","title":"Unlocking single cell spatial omics analyses with scdney - Visium","text":"order develop understanding data, important bear mind outcomes derived scFeatures combine several association studies. Hence, necessary examine every separate feature category individual unit study. section presents graphic representation showing visualise distribution features across individuals. following code developed identify retrieve samples associated disease outcome. particular step necessary setting focus limited two specific categories individuals rather including samples.","code":""},{"path":"/articles/VisiumVersion3.html","id":"proportion-raw","dir":"Articles","previous_headings":"How do we generate molecular representations for each individual? > What can we learn from the outputs from scFeatures? > Can we identify feature of interest among each types of feature category?","what":"Proportion raw","title":"Unlocking single cell spatial omics analyses with scdney - Visium","text":"","code":"feature <- scfeatures_result$proportion_raw   plot_barplot(feature ) + ggtitle(\"Proportion raw feature\")"},{"path":"/articles/VisiumVersion3.html","id":"gene-mean-celltype","dir":"Articles","previous_headings":"How do we generate molecular representations for each individual? > What can we learn from the outputs from scFeatures? > Can we identify feature of interest among each types of feature category?","what":"Gene mean celltype","title":"Unlocking single cell spatial omics analyses with scdney - Visium","text":"","code":"feature <- scfeatures_result$gene_mean_celltype[, 1:100] feature   <- feature[  , grep(\"Cardio\", colnames(feature)) ] plot_boxplot(feature) + ggtitle(\"Gene mean celltype feature\")"},{"path":"/articles/VisiumVersion3.html","id":"pathway-mean","dir":"Articles","previous_headings":"How do we generate molecular representations for each individual? > What can we learn from the outputs from scFeatures? > Can we identify feature of interest among each types of feature category?","what":"Pathway mean","title":"Unlocking single cell spatial omics analyses with scdney - Visium","text":"","code":"feature <- scfeatures_result$pathway_mean[, 1:10] plot_boxplot(feature) + ggtitle(\"Pathway mean feature\")"},{"path":"/articles/VisiumVersion3.html","id":"gene-mean-bulk","dir":"Articles","previous_headings":"How do we generate molecular representations for each individual? > What can we learn from the outputs from scFeatures? > Can we identify feature of interest among each types of feature category?","what":"Gene mean bulk","title":"Unlocking single cell spatial omics analyses with scdney - Visium","text":"","code":"feature <- scfeatures_result$gene_mean_bulk[, 1:20] plot_boxplot(feature) + ggtitle(\"Gene mean bulk feature\")"},{"path":"/articles/VisiumVersion3.html","id":"nearest-neighbour-correlation","dir":"Articles","previous_headings":"How do we generate molecular representations for each individual? > What can we learn from the outputs from scFeatures? > Can we identify feature of interest among each types of feature category?","what":"Nearest neighbour correlation","title":"Unlocking single cell spatial omics analyses with scdney - Visium","text":"","code":"feature <- scfeatures_result$nn_correlation[, 1:10] plot_boxplot(feature) + ggtitle(\"Nearest neighbour correlation feature\")"},{"path":"/articles/VisiumVersion3.html","id":"association-study-report---are-the-generated-features-sensible","dir":"Articles","previous_headings":"How do we generate molecular representations for each individual? > What can we learn from the outputs from scFeatures?","what":"Association study report - are the generated features sensible?","title":"Unlocking single cell spatial omics analyses with scdney - Visium","text":"accommodate easier interpretation features, scFeatures contains function run_association_study_report enables user readily visualise explore generated features one line code. used caution depending number cell-types considered, automatically-generated graphics may efficient way interpretation. Specify folder store html report. Using function getwd(), specify store current working directory. Critical Thinking Q: Using HTML, can look critical thinking questions researcher ask generated features. questions exploratory right wrong answer. Q7: generated features look reasonable? cell type(s) like focus next stage analysis? feature type(s) like focus next stage analysis? Q8: conditions data relatively easy difficult distinguish?","code":"output_folder <-  getwd() run_association_study_report(scfeatures_result, output_folder )"},{"path":"/articles/VisiumVersion3.html","id":"can-we-classify-or-discrimiante-between-the-ischaemic-and-myogenic-samples","dir":"Articles","previous_headings":"","what":"Can we classify or discrimiante between the ischaemic and myogenic samples?","title":"Unlocking single cell spatial omics analyses with scdney - Visium","text":"section build classification model predict whether samples belong ischaemic myogenic group.","code":""},{"path":"/articles/VisiumVersion3.html","id":"building-classification-model","dir":"Articles","previous_headings":"Can we classify or discrimiante between the ischaemic and myogenic samples?","what":"Building classification model","title":"Unlocking single cell spatial omics analyses with scdney - Visium","text":"Recall previous section stored 13 feature types matrix list. Instead manually retrieving matrix list build separate models, classifyR can directly take list matrices input run repeated cross-validation model matrix individually. , run 5 repeats 3 folds cross-validation.","code":"outcome = scfeatures_result[[1]] %>% rownames %>% strsplit(\"_cond_\") %>% sapply(function(x) x[2]) table(outcome)  ### generate classfyr result  classifyr_result <- crossValidate(scfeatures_result,                                  outcome,                                   classifier = \"kNN\",                                  nFolds = 3,                                   nRepeats = 5,                                   nCores = 5  )"},{"path":"/articles/VisiumVersion3.html","id":"visualising-the-classification-performance","dir":"Articles","previous_headings":"Can we classify or discrimiante between the ischaemic and myogenic samples?","what":"Visualising the classification performance","title":"Unlocking single cell spatial omics analyses with scdney - Visium","text":"examine classification model performance, first need specify metric calculate. , calculate balanced accuracy. Format output visualise accuracy using boxplots.","code":"classifyr_result <-  readRDS(\"~/biocasia_data/classifyr_result.rds\") classifyr_result <- lapply(classifyr_result,                             function(x) calcCVperformance(x, performanceType = \"Balanced Accuracy\")) level_order <- names(scfeatures_result)  p  <- performancePlot(classifyr_result) +    theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +    scale_x_discrete(limits = level_order)   p"},{"path":"/articles/VisiumVersion3.html","id":"session-info","dir":"Articles","previous_headings":"Can we classify or discrimiante between the ischaemic and myogenic samples?","what":"Session info","title":"Unlocking single cell spatial omics analyses with scdney - Visium","text":"","code":"sessionInfo() ## R version 4.3.1 (2023-06-16) ## Platform: x86_64-pc-linux-gnu (64-bit) ## Running under: Debian GNU/Linux 12 (bookworm) ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  ## LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.21.so;  LAPACK version 3.11.0 ##  ## locale: ##  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        ##  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    ##  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           ## [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    ##  ## time zone: Australia/Sydney ## tzcode source: system (glibc) ##  ## attached base packages: ## [1] stats4    stats     graphics  grDevices utils     datasets  methods   ## [8] base      ##  ## other attached packages: ##  [1] reshape_0.8.9               SPOTlight_1.5.2             ##  [3] scran_1.28.1                scater_1.28.0               ##  [5] scuttle_1.10.1              spatstat.geom_3.2-7         ##  [7] spatstat.data_3.0-3         survminer_0.4.9             ##  [9] ggpubr_0.6.0                tidyr_1.3.0                 ## [11] scattermore_1.2             plotly_4.10.3               ## [13] limma_3.56.2                dplyr_1.1.3                 ## [15] spicyR_1.12.0               ggthemes_4.2.4              ## [17] lisaClust_1.9.2             ClassifyR_3.5.21            ## [19] survival_3.5-7              BiocParallel_1.34.2         ## [21] MultiAssayExperiment_1.26.0 generics_0.1.3              ## [23] scFeatures_0.99.27          ggplot2_3.4.4               ## [25] SpatialExperiment_1.11.2    SingleCellExperiment_1.22.0 ## [27] SummarizedExperiment_1.30.2 Biobase_2.60.0              ## [29] GenomicRanges_1.52.0        GenomeInfoDb_1.36.1         ## [31] IRanges_2.34.1              S4Vectors_0.38.1            ## [33] BiocGenerics_0.46.0         MatrixGenerics_1.12.2       ## [35] matrixStats_1.0.0           ##  ## loaded via a namespace (and not attached): ##   [1] R.methodsS3_1.8.2          GSEABase_1.62.0            ##   [3] progress_1.2.2             tiff_0.1-11                ##   [5] EnsDb.Mmusculus.v79_2.99.0 goftest_1.2-3              ##   [7] DT_0.30                    Biostrings_2.68.1          ##   [9] HDF5Array_1.28.1           vctrs_0.6.4                ##  [11] spatstat.random_3.2-1      digest_0.6.33              ##  [13] png_0.1-8                  shape_1.4.6                ##  [15] EnsDb.Hsapiens.v79_2.99.0  registry_0.5-1             ##  [17] ggrepel_0.9.4              deldir_1.0-9               ##  [19] magick_2.8.1               MASS_7.3-60                ##  [21] pkgdown_2.0.7              reshape2_1.4.4             ##  [23] httpuv_1.6.12              foreach_1.5.2              ##  [25] withr_2.5.1                ggfun_0.1.3                ##  [27] xfun_0.40                  ellipsis_0.3.2             ##  [29] cytomapper_1.12.0          memoise_2.0.1              ##  [31] proxyC_0.3.4               ggbeeswarm_0.7.2           ##  [33] systemfonts_1.0.5          ragg_1.2.6                 ##  [35] zoo_1.8-12                 GlobalOptions_0.1.2        ##  [37] gtools_3.9.4               V8_4.4.0                   ##  [39] SingleCellSignalR_1.12.0   R.oo_1.25.0                ##  [41] prettyunits_1.2.0          KEGGREST_1.40.0            ##  [43] promises_1.2.1             httr_1.4.7                 ##  [45] rstatix_0.7.2              restfulr_0.0.15            ##  [47] rhdf5filters_1.12.1        rhdf5_2.44.0               ##  [49] rstudioapi_0.15.0          concaveman_1.1.0           ##  [51] babelgene_22.9             curl_5.0.2                 ##  [53] zlibbioc_1.46.0            ScaledMatrix_1.8.1         ##  [55] polyclip_1.10-6            GenomeInfoDbData_1.2.10    ##  [57] fftwtools_0.9-11           xtable_1.8-4               ##  [59] stringr_1.5.0              desc_1.4.2                 ##  [61] doParallel_1.0.17          evaluate_0.22              ##  [63] S4Arrays_1.0.6             BiocFileCache_2.8.0        ##  [65] hms_1.1.3                  irlba_2.3.5.1              ##  [67] colorspace_2.1-0           filelock_1.0.2             ##  [69] magrittr_2.0.3             later_1.3.1                ##  [71] viridis_0.6.4              lattice_0.22-5             ##  [73] NMF_0.26                   cowplot_1.1.1              ##  [75] XML_3.99-0.14              ggupset_0.3.0              ##  [77] RcppAnnoy_0.0.21           svgPanZoom_0.3.4           ##  [79] class_7.3-22               pillar_1.9.0               ##  [81] simpleSeg_1.2.0            nlme_3.1-163               ##  [83] EBImage_4.42.0             iterators_1.0.14           ##  [85] gridBase_0.4-7             caTools_1.18.2             ##  [87] compiler_4.3.1             beachmat_2.16.0            ##  [89] stringi_1.7.12             tensor_1.5                 ##  [91] minqa_1.2.6                GenomicAlignments_1.36.0   ##  [93] plyr_1.8.9                 msigdbr_7.5.1              ##  [95] crayon_1.5.2               abind_1.4-5                ##  [97] BiocIO_1.10.0              sp_2.1-1                   ##  [99] locfit_1.5-9.8             terra_1.7-55               ## [101] bit_4.0.5                  codetools_0.2-19           ## [103] textshaping_0.3.7          BiocSingular_1.16.0        ## [105] crosstalk_1.2.0            bslib_0.5.1                ## [107] multtest_2.56.0            mime_0.12                  ## [109] splines_4.3.1              circlize_0.4.15            ## [111] Rcpp_1.0.11                dbplyr_2.4.0               ## [113] sparseMatrixStats_1.12.2   knitr_1.44                 ## [115] blob_1.2.4                 utf8_1.2.4                 ## [117] AnnotationFilter_1.24.0    lme4_1.1-34                ## [119] fs_1.6.3                   nnls_1.5                   ## [121] DelayedMatrixStats_1.22.1  GSVA_1.48.2                ## [123] ggsignif_0.6.4             tibble_3.2.1               ## [125] Matrix_1.6-1.1             scam_1.2-14                ## [127] statmod_1.5.0              svglite_2.1.2              ## [129] tweenr_2.0.2               pkgconfig_2.0.3            ## [131] pheatmap_1.0.12            tools_4.3.1                ## [133] cachem_1.0.8               RSQLite_2.3.1              ## [135] viridisLite_0.4.2          DBI_1.1.3                  ## [137] numDeriv_2016.8-1.1        fastmap_1.1.1              ## [139] rmarkdown_2.25             scales_1.2.1               ## [141] grid_4.3.1                 shinydashboard_0.7.2       ## [143] Rsamtools_2.16.0           broom_1.0.5                ## [145] sass_0.4.7                 BiocManager_1.30.22        ## [147] graph_1.78.0               carData_3.0-5              ## [149] farver_2.1.1               scatterpie_0.2.1           ## [151] mgcv_1.9-0                 yaml_2.3.7                 ## [153] rtracklayer_1.60.0         cli_3.6.1                  ## [155] purrr_1.0.2                lifecycle_1.0.3            ## [157] uwot_0.1.16                bluster_1.10.0             ## [159] backports_1.4.1            annotate_1.78.0            ## [161] gtable_0.3.4               rjson_0.2.21               ## [163] parallel_4.3.1             ape_5.7-1                  ## [165] jsonlite_1.8.7             edgeR_3.42.4               ## [167] bitops_1.0-7               bit64_4.0.5                ## [169] Rtsne_0.16                 spatstat.utils_3.0-4       ## [171] BiocNeighbors_1.18.0       RcppParallel_5.1.7         ## [173] jquerylib_0.1.4            metapod_1.8.0              ## [175] dqrng_0.3.1                survMisc_0.5.6             ## [177] R.utils_2.12.2             lazyeval_0.2.2             ## [179] shiny_1.7.5.1              htmltools_0.5.6.1          ## [181] KMsurv_0.1-5               rappdirs_0.3.3             ## [183] ensembldb_2.24.0           glue_1.6.2                 ## [185] XVector_0.40.0             RCurl_1.98-1.12            ## [187] rprojroot_2.0.3            jpeg_0.1-10                ## [189] gridExtra_2.3              AUCell_1.22.0              ## [191] boot_1.3-28.1              igraph_1.5.1               ## [193] R6_2.5.1                   gplots_3.1.3               ## [195] labeling_0.4.3             km.ci_0.5-6                ## [197] GenomicFeatures_1.52.1     cluster_2.1.4              ## [199] rngtools_1.5.2             Rhdf5lib_1.22.0            ## [201] nloptr_2.0.3               DelayedArray_0.26.6        ## [203] tidyselect_1.2.0           vipor_0.4.5                ## [205] ProtGenerics_1.32.0        raster_3.6-26              ## [207] ggforce_0.4.1              xml2_1.3.5                 ## [209] car_3.1-2                  AnnotationDbi_1.62.2       ## [211] rsvd_1.0.5                 munsell_0.5.0              ## [213] KernSmooth_2.23-22         data.table_1.14.8          ## [215] htmlwidgets_1.6.2          RColorBrewer_1.1-3         ## [217] biomaRt_2.56.1             rlang_1.1.1                ## [219] spatstat.sparse_3.0-3      spatstat.explore_3.2-5     ## [221] lmerTest_3.1-3             fansi_1.0.5                ## [223] beeswarm_0.4.0"},{"path":"/articles/VisiumVersion3.html","id":"acknowledgment","dir":"Articles","previous_headings":"Can we classify or discrimiante between the ischaemic and myogenic samples?","what":"Acknowledgment","title":"Unlocking single cell spatial omics analyses with scdney - Visium","text":"authors thank colleagues, particularly University Sydney, Sydney Precision Data Science Charles Perkins Centre support intellectual engagement. Special thanks Ellis Patrick, Shila Ghazanfar, Andy Tran Helen Fu guiding supporting building workshop.","code":""},{"path":"/articles/breastCancerIMC.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Unlocking single cell spatial omics analyses with scdney - IMC","text":"single cell technology advances, recent development spatial omics allows us examine spatial organisation cells within tissues native environment. workshop discuss challenges analytical focus associated using multi-sample spatial datasets disease risk prognosis. also talk general analytical strategies critical thinking questions arise workflow. Note: data analysis workshop offers participants opportunity engage hands-analysis using R. However, comfortable coding R, can still acquire valuable interpretation skills reviewing output provide file.","code":""},{"path":"/articles/breastCancerIMC.html","id":"preparation-and-assumed-knowledge","dir":"Articles","previous_headings":"Overview","what":"Preparation and assumed knowledge","title":"Unlocking single cell spatial omics analyses with scdney - IMC","text":"Knowledge R syntax Familiarity SingleCellExperiment class Basic knowledge single cell data analysis. can access previous workshops quick review single cell data analysis. Ability install required R packages, please check sessionInfo end document ensure using correct version. Familiarity previous workshop vignette Introduction Single Cell RNA-seq Analysis","code":""},{"path":"/articles/breastCancerIMC.html","id":"learning-objectives","dir":"Articles","previous_headings":"Overview","what":"Learning objectives","title":"Unlocking single cell spatial omics analyses with scdney - IMC","text":"Describe visualise spatial omics datasets Calculate different measures describe spatial distribution cell types Generate individual feature representations cell-level expression matrix Perform multi-view disease outcome prognosis package ClassifyR assess performance classification survival models identify assess individual performance given survival model. Explore various strategies disease outcome prognosis using spatial omics data","code":""},{"path":"/articles/breastCancerIMC.html","id":"time-outline","dir":"Articles","previous_headings":"Overview","what":"Time outline","title":"Unlocking single cell spatial omics analyses with scdney - IMC","text":"Structure 3-hour workshop:","code":""},{"path":[]},{"path":"/articles/breastCancerIMC.html","id":"data-and-background","dir":"Articles","previous_headings":"Initial exploration and visualisation","what":"Data and background","title":"Unlocking single cell spatial omics analyses with scdney - IMC","text":"widely-known METABRIC breast cancer cohort recently imaging mass cytometry (cell-level resolution) generated subset . publication describing data Imaging Mass Cytometry Multiplatform Genomics Define Phenogenomic Landscape Breast Cancer, Nature Cancer, 2020. 483 cancer samples IMC data. However, subset interest individuals lymph node metastasis. Can risk recurrence accurately estimated therefore inform aggressively need treated? component analysis patient clinical data, sourced Supplementary Table 5 Dynamics Breast-cancer Relapse Reveal Late-recurring ER-positive Genomic Subgroups, Nature, 2019. original data restricted images least 400 cells, lymph node cancer Stage 1. Basic characteristics data objects: - dataset contains 38 proteins 76307 cells. - outcome recurrence-free survival.","code":"## Quick look at data assay(data_sce)[1:5, 1:5] ##           MB-0002:345:93 MB-0002:345:107 MB-0002:345:113 MB-0002:345:114 ## HH3_total     4.82032390       3.8229411      2.55845170      4.82208870 ## CK19          1.21185160       1.3223530      0.13832258      0.33366668 ## CK8_18        2.80274720       2.4720588      0.60545164      2.43351100 ## Twist         0.14651649       0.1176471      0.09877419      0.20791112 ## CD68          0.07863736       0.1016471      0.03225806      0.05237778 ##           MB-0002:345:125 ## HH3_total      2.41391110 ## CK19           0.07055555 ## CK8_18         0.20724444 ## Twist          0.12004445 ## CD68           0.00000000"},{"path":"/articles/breastCancerIMC.html","id":"exploration-1-how-complex-is-my-data","dir":"Articles","previous_headings":"Initial exploration and visualisation","what":"Exploration 1: How complex is my data?","title":"Unlocking single cell spatial omics analyses with scdney - IMC","text":"start analysis pipeline, often good explore data get sense complexity. usually exploring distribution outcomes various variables individuals’ meta-data. , use cross-tabulation examine following variables: Surgery vs death ER status Grade","code":"print(\"Stage and death\") ## [1] \"Stage and death\" table(clinical$Breast.Surgery, clinical$Death, useNA = \"ifany\") ##                     ##                      0  1 ##   BREAST CONSERVING 38 14 ##   MASTECTOMY        16  6 ##   <NA>               2  1 print(\"Number of individuals based on ER status\") ## [1] \"Number of individuals based on ER status\" table(clinical$ER.Status) ##  ## neg pos  ##  12  64 print(\"Number of individuals based on Grade\") ## [1] \"Number of individuals based on Grade\" table(clinical$Grade) ##  ##  1  2  3  ## 14 30 28"},{"path":"/articles/breastCancerIMC.html","id":"exploration-2-how-to-visualise-my-data","dir":"Articles","previous_headings":"Initial exploration and visualisation","what":"Exploration 2: How to visualise my data?","title":"Unlocking single cell spatial omics analyses with scdney - IMC","text":"Typically single-cell data analysis, perform dimension reduction project high dimensional cell x gene matrix 2D space. allows us visualise various things interest, distribution cell types disease outcomes. dataset, cells classified 22 cell types based markers.  Interactive Q&: can learn illustrations? anything interesting plot? Questions consider include: Q1: cell type cluster together? Q2: large number categories, dimensionality reduction plots interpretable misleading due overplotting? Visualise selected patient: selectively visualise two individuals highlighting selected individuals.","code":"data_sce <- runUMAP(data_sce, scale=TRUE) # With the UMAP function we can highlight by meta data of interest # Here we highlight the cell types and sample ID a <- plotUMAP(data_sce, colour_by = \"description\") b <- plotUMAP(data_sce, colour_by = \"metabricId\")  ggarrange( plotlist = list(a,b)) # Extract the meta data and the UMAP dimension of the dataset metadata <- colData(data_sce) metadata <- cbind(metadata, reducedDim(data_sce, \"UMAP\")) metadata <- data.frame(metadata)  # For the selected patient MB-0475, denote it as \"selected patient\"  # and all other individuals as \"other individuals\" metadata$selected_patient <- ifelse(metadata$metabricId == \"MB-0475\", \"seleted patient\" , \"other individuals\")  # Generate a UMAP plot and store it in R object `a`    a <- ggplot(metadata, aes(x =UMAP1 , y = UMAP2 , colour = selected_patient  )) + geom_scattermore(pointsize = 0.5)  + scale_colour_manual(values = c(\"grey\" , \"red\"))   # For the selected patient MB-0628, denote it as \"selected patient\"  # and all other individuals as \"other individuals\" metadata$selected_patient <- ifelse( metadata$metabricId == \"MB-0628\", \"seleted patient\" , \"other individuals\")          # Generate a UMAP plot and store it in R object `b`    b <- ggplot(metadata, aes(x =UMAP1 , y = UMAP2 , colour = selected_patient  )) + geom_scattermore(pointsize = 0.5)  + scale_colour_manual(values = c(\"grey\" , \"red\"))   ggarrange(plotlist = list(a,b ))"},{"path":"/articles/breastCancerIMC.html","id":"exploration-3-is-there-a-spatial-structure-in-my-data","dir":"Articles","previous_headings":"Initial exploration and visualisation","what":"Exploration 3: Is there a spatial structure in my data?","title":"Unlocking single cell spatial omics analyses with scdney - IMC","text":"advantage spatial omics can examine organisation cell types occurs tissue slide. , visualise one slides patient. optional exercise, can: - permute cell type label. - permute spatial coordinate. give sense random ordering.","code":""},{"path":"/articles/breastCancerIMC.html","id":"spatial-plot","dir":"Articles","previous_headings":"Initial exploration and visualisation > Exploration 3: Is there a spatial structure in my data?","what":"Spatial plot","title":"Unlocking single cell spatial omics analyses with scdney - IMC","text":"select particular patient “MB-0263” visualise spatial pattern using ggplot.","code":"# obtaining the meta data for this patient  one_sample <- data_sce[, data_sce$metabricId  == \"MB-0263\"] one_sample  <- colData(one_sample) one_sample <- data.frame(one_sample)   a <- ggplot(one_sample, aes(x = Location_Center_X, y = Location_Center_Y, colour = description)) +    geom_point(alpha=0.7) +    scale_colour_tableau() +    ggtitle(\"Original slide\")  a"},{"path":"/articles/breastCancerIMC.html","id":"optional-code-random-spatial-pattern","dir":"Articles","previous_headings":"Initial exploration and visualisation > Exploration 3: Is there a spatial structure in my data?","what":"[Optional code] Random spatial pattern","title":"Unlocking single cell spatial omics analyses with scdney - IMC","text":"code investigates permutations spatially resolved data. Please examine next tab actual results.","code":"# \"Optional: Permute the cell type labels\" one_sample$description_permute <- sample(one_sample$description) b <- ggplot(one_sample, aes(x = Location_Center_X , y = Location_Center_Y, colour =description_permute)) + geom_point(alpha=0.7)  + scale_colour_tableau() + ggtitle(\"Permute the cell type label\") # \"Optional: Permute the spatial coordinate\" one_sample$Location_Center_X_permute <- sample(one_sample$Location_Center_X) one_sample$Location_Center_Y_permute <- sample(one_sample$Location_Center_Y) c <- ggplot(one_sample, aes(x = Location_Center_X_permute , y = Location_Center_Y_permute, colour = description)) + geom_point(alpha=0.7)  + scale_colour_tableau() + ggtitle(\"Permute the X, Y coordinate\")"},{"path":"/articles/breastCancerIMC.html","id":"spatial-structure","dir":"Articles","previous_headings":"Initial exploration and visualisation > Exploration 3: Is there a spatial structure in my data?","what":"Spatial structure","title":"Unlocking single cell spatial omics analyses with scdney - IMC","text":"aim understanding concept spatial randomness. Spatial statistics topic study encompasses wide range research. next two code chucks focus examination two distinct permutation strategies. objective investigation gain understanding various permutation strategies might yield varied perceptions randomness.  Interactive Q&: Q3: structure data cell type randomly distribution?","code":"## ggarrange provides a way to arrange multiple ggplots for efficient visual comparison ggarrange( plotlist = list(a, b, c), ncol = 3)"},{"path":"/articles/breastCancerIMC.html","id":"describing-tissue-microenvrionments-and-cellular-neighbourhoods","dir":"Articles","previous_headings":"","what":"Describing tissue microenvrionments and cellular neighbourhoods","title":"Unlocking single cell spatial omics analyses with scdney - IMC","text":"Spatial data allow identification variety characteristics including distinct cell types within image, providing overview tissue environment. allows scientists explore cellular architecture environment association phenotype information (e.g meta-data). data story, interested whether individuals good poor outcome. outcome often called ‘prognosis’ good outcome sometimes called ‘favourable’. section, examine graphically cell-type co-localisation varies across spatial regions information associated individual survival outcome.","code":""},{"path":"/articles/breastCancerIMC.html","id":"do-cell-type-co-localise-in-specfic-regions","dir":"Articles","previous_headings":"Describing tissue microenvrionments and cellular neighbourhoods","what":"Do cell type co-localise in specfic regions?","title":"Unlocking single cell spatial omics analyses with scdney - IMC","text":"begin examining can identify visualise regions tissue spatial associations cell-types similar. many packages perform task use lisaClust function based “local L-function” spatially cluster cells different regions similar cell type composition. already pre-loaded . Please proceed next task.","code":"set.seed(51773) BPPARAM <- MulticoreParam(16)  # Cluster cells into spatial regions with similar composition. data_sce  <- lisaClust(   data_sce ,   k = 5,   Rs = c(20, 50, 100),   sigma = 50,   spatialCoords = c(\"Location_Center_X\", \"Location_Center_Y\"),   cellType = \"description\",   imageID = \"ImageNumber\" ,   regionName = \"region\",   BPPARAM = BPPARAM )"},{"path":"/articles/breastCancerIMC.html","id":"which-regions-appear-to-be-different-between-good-and-poor-prognosis","dir":"Articles","previous_headings":"Describing tissue microenvrionments and cellular neighbourhoods","what":"Which regions appear to be different between good and poor prognosis?","title":"Unlocking single cell spatial omics analyses with scdney - IMC","text":"use lisaClust function previous subsection cluster cells five different spatial regions. Next, case study, compare individuals good poor prognosis examine graphically, regions appear different good poor prognosis. define: - Good prognosis individuals > 10 years recurrence-free survival - Poor prognosis individuals < 5 years recurrence-free survival. using code store information clinical$survivalgroup. recurrence free survival (RFS) provided variable timeRFS","code":"## Extract time to recurrence-free survival clinical$survivalgroup <- \"neither\"  ## Define poor and good prognosis clinical$survivalgroup[which( clinical$timeRFS  < 5* 365) ] <- \"poor\"  clinical$survivalgroup[which( clinical$timeRFS  > 10* 365) ] <-  \"good\""},{"path":"/articles/breastCancerIMC.html","id":"individual-level","dir":"Articles","previous_headings":"Describing tissue microenvrionments and cellular neighbourhoods > Which regions appear to be different between good and poor prognosis?","what":"Individual level","title":"Unlocking single cell spatial omics analyses with scdney - IMC","text":"visualise spatial domain (regions) detection result based one individual. can either visualise regions one graph highlighting region separate graphs. use terminology “spatial domain” “regions” interchangeably. Depending number regions, may useful visualise spatial regions either collectively single graph separately multiple graphs. visualise single graph, hatchingPlot() function used create hatching patterns representating spatial regions cell-types. hatching geom used create hatching patterns representation spatial regions.  written small function draw_region_clustering_result visualise data separately multiple graphs individual MB-0628.","code":"## To visualise it in a single graph hatchingPlot(   data_sce,   region = \"region\",   imageID = \"metabricId\",   cellType = \"description\",   spatialCoords = c(\"Location_Center_X\", \"Location_Center_Y\") ) draw_region_clustering_result(data_sce ,                                sample = \"metabricId\" ,                                selected_sample =  \"MB-0628\" ) ## [[1]] ##  ## [[2]]"},{"path":"/articles/breastCancerIMC.html","id":"across-individuals","dir":"Articles","previous_headings":"Describing tissue microenvrionments and cellular neighbourhoods > Which regions appear to be different between good and poor prognosis?","what":"Across individuals","title":"Unlocking single cell spatial omics analyses with scdney - IMC","text":"can better interpret region output summarising proportion cell type region across individuals. look composition cell types region, compare prognostic outcomes.  Interactive Q&: Q4: regions appear different poor prognosis (short-term survival) good prognosis (long-term survival) individuals?","code":"draw_dotplot(data_sce,                sample = \"metabricId\" ,               celltype = \"description\" ,                group= \"survivalgroup\" ,               group_of_interest =  c(\"poor\" , \"good\"))"},{"path":"/articles/breastCancerIMC.html","id":"further-exploration-by-visualising-selected-regions","dir":"Articles","previous_headings":"Describing tissue microenvrionments and cellular neighbourhoods > Which regions appear to be different between good and poor prognosis?","what":"Further exploration by visualising selected regions","title":"Unlocking single cell spatial omics analyses with scdney - IMC","text":"number sub-cell types increase considerably want add spatial domain (region) information. enhance clarity facilitate understanding, may helpful choose predetermined region. code generates set boxplots enable comparison cell type proportions individuals good poor prognosis region_5.","code":"draw_selected_region_boxplot(data_sce,                               sample = \"metabricId\" ,                               celltype =\"description\" ,                               group  = \"survivalgroup\",                               group_of_interest =  c(\"poor\" , \"good\"),                               select_region = \"region_5\")"},{"path":"/articles/breastCancerIMC.html","id":"how-do-we-generate-a-molecular-representation-for-each-individual","dir":"Articles","previous_headings":"","what":"How do we generate a molecular representation for each individual?","title":"Unlocking single cell spatial omics analyses with scdney - IMC","text":"workshop, use scFeatures package generate molecular representation individuals matrix features x cells. molecular representation interpretable hence facilitates downstream analysis individual. general, scFeatures generates features across six categories representing different molecular views cellular characteristics. include: cell type proportions cell type specific gene expressions cell type specific pathway expressions cell type specific cell-cell interaction (CCI) scores overall aggregated gene expressions spatial metrics different types features constructed enable comprehensive multi-view understanding individual matrix spot x cells. default, function generate total 13 different types features (feature_types) shown store list. generated feature types stored matrix samples x features. additional spatial measure, can also consider region information additional layer information. Thus, following code aims create cell-type specific features region. use function “paste0” construct region-specific sub-cell types name celltype R object data_sce. simplicity, workshop, variable celltype R object data_sce refers region-specific sub-cell types. Discussion: Q6: samples cell types like remove data?","code":"##  [1] \"proportion_raw\"       \"proportion_logit\"     \"proportion_ratio\"     ##  [4] \"gene_mean_celltype\"   \"gene_prop_celltype\"   \"gene_cor_celltype\"    ##  [7] \"gene_mean_bulk\"       \"gene_prop_bulk\"       \"gene_cor_bulk\"        ## [10] \"L_stats\"              \"celltype_interaction\" \"morans_I\"             ## [13] \"nn_correlation\" region <- data_sce$region  # Define a series of sub-cell types that is regional specific data_sce$celltype <- paste0( data_sce$description , \"-\" , region) print(\"Nnumber of cells in each sample\") ## [1] \"Nnumber of cells in each sample\" DT::datatable( data.frame(table( data_sce$metabricId )) , options = list(scrollX = TRUE)) print(\"Number of cells in each region-specific sub-cell type\") ## [1] \"Number of cells in each region-specific sub-cell type\" DT::datatable( data.frame(table( data_sce$celltype)) , options = list(scrollX = TRUE))"},{"path":"/articles/breastCancerIMC.html","id":"how-to-create-molecular-representations-of-individuals","dir":"Articles","previous_headings":"How do we generate a molecular representation for each individual?","what":"How to create molecular representations of individuals?","title":"Unlocking single cell spatial omics analyses with scdney - IMC","text":"different ways can use scFeatures generate molecular representations individuals requires following information spatial data. data, sample, X coordinates, Y coordinates, feature_types, type total 13 different types features (feature_types) can choose generate. argument type refers type input data . either scrna (single-cell RNA-sequencing data), spatial_p (spatial proteomics data), spatial_t (single cell spatial data).","code":""},{"path":"/articles/breastCancerIMC.html","id":"calculate-feature_types","dir":"Articles","previous_headings":"How do we generate a molecular representation for each individual? > How to create molecular representations of individuals?","what":"Calculate feature_types","title":"Unlocking single cell spatial omics analyses with scdney - IMC","text":"Suppose interested determining proportion cell type individual within region. necessary specify type = spatial_p reflect spatial proteomics data feature_types = proportion_raw indicate intend calculate cell type proportion region-specific sub-cell types. generated feature matrix samples x features, code shows first 5 features first 5 individuals region-specific sub-cell types.","code":"## [A] The next few lines extract specific information from data_sce as input to scFeatures.  ## Extract the expression matrix from data_sce IMCmatrix <- assay(data_sce)  ## Extract the sample information  ## append the condition to the individuals so we can easily retrieve the individuals condition  sample <- data_sce$metabricId  cond  <- clinical[match(sample, clinical$metabricId), ]$survivalgroup sample <- paste0(sample, \"_cond_\", cond )   ## Extract the region-specific sub-cell types celltype <- data_sce$celltype  ## Extract the spatial coordinates spatialCoords <- list(colData(data_sce)$Location_Center_X, colData(data_sce)$Location_Center_Y)  ### [B] Running scFeatures scfeatures_result <- scFeatures( IMCmatrix,                                   sample = sample,                                   celltype = celltype,                                   spatialCoords = spatialCoords,                                  feature_types = \"proportion_raw\",                                   type = \"spatial_p\" ) scfeatures_result$proportion_raw[1:5, 1:5] ##                      B cells-region1 B cells-region2 B cells-region3 ## MB-0002_cond_neither    0.0000000000     0.000000000               0 ## MB-0064_cond_neither    0.0000000000     0.000000000               0 ## MB-0128_cond_good       0.0009950249     0.044776119               0 ## MB-0130_cond_good       0.0000000000     0.000000000               0 ## MB-0132_cond_neither    0.0000000000     0.007174888               0 ##                      B cells-region4 B cells-region5 ## MB-0002_cond_neither      0.00000000     0.000000000 ## MB-0064_cond_neither      0.00000000     0.000000000 ## MB-0128_cond_good         0.06666667     0.007960199 ## MB-0130_cond_good         0.00000000     0.000000000 ## MB-0132_cond_neither      0.00000000     0.000000000"},{"path":"/articles/breastCancerIMC.html","id":"focus-sub-cell-type","dir":"Articles","previous_headings":"How do we generate a molecular representation for each individual? > How to create molecular representations of individuals?","what":"Focus sub-cell type","title":"Unlocking single cell spatial omics analyses with scdney - IMC","text":"Suppose interested molecular representation individuals r HR- CK7+ within region 5.","code":"## [A] The next few lines extract specific information from data_sce as input to scFeatures.  ## Select the HR- CK7+-region sub-cell type  index <-   grep(\"HR- CK7+-region\" , data_sce$celltype, fixed=TRUE) selected_data  <-  IMCmatrix[, index] selected_sample <-  sample[index] selected_celltype <- data_sce$celltype[ index]  selected_spatialCoords <- list(colData(data_sce)$Location_Center_X[index],                                 colData(data_sce)$Location_Center_Y[index])  ### [B] Running scFeatures scfeatures_result <- scFeatures( selected_data,                                   sample = selected_sample,                                   celltype = selected_celltype,                                  spatialCoords = selected_spatialCoords,                                  feature_types = \"proportion_raw\", type = \"spatial_p\" )  ### [C] Visualize the regional composition makeup for each individual for HR- CK7+ and HR- CK7- feature <- scfeatures_result$proportion_raw feature <- feature[ grep(\"poor|good\", rownames(feature)),  ]  plot_barplot( feature ) + ggtitle(\"Proportion raw feature\")"},{"path":"/articles/breastCancerIMC.html","id":"all-cell-types-and-features-in-one-line-of-code","dir":"Articles","previous_headings":"How do we generate a molecular representation for each individual? > How to create molecular representations of individuals?","what":"All cell types and features in one line of code","title":"Unlocking single cell spatial omics analyses with scdney - IMC","text":"code enable us generate feature types cell types line. Due limitations today’s computational capacity, ** Please run today’s workshop, crash system**.","code":"# here, we specify that this is a spatial proteomics data # scFeatures support parallel computation to speed up the process  scfeatures_result <- scFeatures(IMCmatrix,                                  type = \"spatial_p\",                                 sample = sample,                                  celltype = celltype,                                  spatialCoords = spatialCoords,                                 ncores = 32)"},{"path":"/articles/breastCancerIMC.html","id":"what-can-we-learn-from-the-outputs-from-scfeatures","dir":"Articles","previous_headings":"How do we generate a molecular representation for each individual?","what":"What can we learn from the outputs from scFeatures?","title":"Unlocking single cell spatial omics analyses with scdney - IMC","text":"Assuming already generated collection molecular representation individuals, please load prepared RDS file scfeatures_result.RDS. , can remind generated feature types stored matrix samples x features.","code":"# Upload pre-generated RDS file scfeatures_result <- readRDS(\"~/biocasia_data/scfeatures_result.RDS\")  # we have generated a total of 13 feature types names(scfeatures_result) ##  [1] \"proportion_raw\"       \"proportion_logit\"     \"proportion_ratio\"     ##  [4] \"gene_mean_celltype\"   \"gene_prop_celltype\"   \"gene_cor_celltype\"    ##  [7] \"gene_mean_bulk\"       \"gene_prop_bulk\"       \"gene_cor_bulk\"        ## [10] \"L_stats\"              \"celltype_interaction\" \"morans_I\"             ## [13] \"nn_correlation\" # What is the number of features that we have generated  lapply(scfeatures_result, dim) ## $proportion_raw ## [1]  77 110 ##  ## $proportion_logit ## [1]  77 110 ##  ## $proportion_ratio ## [1]   77 5995 ##  ## $gene_mean_celltype ## [1]   77 4180 ##  ## $gene_prop_celltype ## [1]   77 4180 ##  ## $gene_cor_celltype ## [1]    77 27958 ##  ## $gene_mean_bulk ## [1] 77 38 ##  ## $gene_prop_bulk ## [1] 77 38 ##  ## $gene_cor_bulk ## [1]  77 703 ##  ## $L_stats ## [1]   77 3842 ##  ## $celltype_interaction ## [1]   77 4393 ##  ## $morans_I ## [1] 77 38 ##  ## $nn_correlation ## [1] 77 38"},{"path":"/articles/breastCancerIMC.html","id":"association-study---can-we-identify-differential-expression-for-a-feature-of-interest","dir":"Articles","previous_headings":"How do we generate a molecular representation for each individual? > What can we learn from the outputs from scFeatures?","what":"Association study - can we identify “differential expression” for a feature of interest","title":"Unlocking single cell spatial omics analyses with scdney - IMC","text":"R object scfeatures_result contains variety features. important question focuses identification features reflect association prognostic outcome, specifically distinguishing good poor outcomes. code provided demonstrates use limma() function fit linear model purpose analysing gene_mean_celltype illustration feature. feature type known gene_mean_celltype represents mean protein expression sub-cell type specific spatial region. matrix consisting 77 individuals 4180 features. important acknowledge within context IMC data, term “gene” used refer “protein”. visualise comparison using volcano plot dotplot cell type specific expression feature. type scatter-plot used quickly identify changes large datasets represent significance (y-axis) versus effect size fold-change (x-axis).  Interactive Q&: Q4: figure prefer? volcano plot dotplot?","code":"# Extract cell type specific gene expression for all regions.  gene_mean_celltype <- scfeatures_result$gene_mean_celltype  # Extract HR+ CK7 cell type specific gene expression for Region5 index <-  grep( \"HR+ CK7--region5\", colnames(gene_mean_celltype) , fixed= T) gene_mean_celltype <- gene_mean_celltype [, index]   # transpose to ensure we have gene by sample matrix gene_mean_celltype <- t(gene_mean_celltype)        # Extract the two conditions of interest - poor prognosis vs good prognosis condition  <- unlist( lapply( strsplit( colnames(gene_mean_celltype) , \"_cond_\"), `[`, 2)) condition <- data.frame(sample = colnames(gene_mean_celltype), condition = condition ) select_index <- which( condition$condition %in% c(\"poor\",  \"good\" )) condition <- condition[ select_index, ] gene_mean_celltype<- gene_mean_celltype [ ,  select_index]   # Calculate log fold change each protein using limma design <- model.matrix(~condition, data = condition) fit <- lmFit(gene_mean_celltype, design) fit <- eBayes(fit) tT <- topTable(fit, n = Inf) tT$gene <- rownames(tT) tT[1:5,] ##                                 logFC   AveExpr         t    P.Value adj.P.Val ## HR+ CK7--region5--c_Myc    -0.2026693 0.3930301 -2.534247 0.01502026 0.2743783 ## HR+ CK7--region5--CAIX     -0.1398111 0.4082151 -2.202695 0.03306478 0.2743783 ## HR+ CK7--region5--Twist    -0.2007777 0.4171795 -2.170854 0.03554873 0.2743783 ## HR+ CK7--region5--vWF_CD31 -0.2401160 0.7328167 -2.036814 0.04789991 0.2743783 ## HR+ CK7--region5--EpCAM    -0.1988532 0.6477055 -2.031460 0.04846277 0.2743783 ##                                    B                       gene ## HR+ CK7--region5--c_Myc    -3.168084    HR+ CK7--region5--c_Myc ## HR+ CK7--region5--CAIX     -3.614202     HR+ CK7--region5--CAIX ## HR+ CK7--region5--Twist    -3.654733    HR+ CK7--region5--Twist ## HR+ CK7--region5--vWF_CD31 -3.820559 HR+ CK7--region5--vWF_CD31 ## HR+ CK7--region5--EpCAM    -3.827018    HR+ CK7--region5--EpCAM # The volcano plot - Significance vs Effect Size p1 <- ggplot( tT , aes(logFC,-log10(P.Value) , text = gene ) )+       geom_point(aes(colour=-log10(P.Value)), alpha=1/3, size=1) +       scale_colour_gradient(low=\"blue\",high=\"red\")+       xlab(\"log2 fold change\") + ylab(\"-log10 p-value\")    # order the proteins by log fold change  tT <- tT[ order(tT$logFC, decreasing = T), ] tT <- tT[1:20, ] p2 <- ggplot( tT , aes( y = reorder(gene, logFC) , x = logFC  ) )+       geom_point(aes(colour=-log10(P.Value)), alpha=1/3, size=4) +       scale_colour_gradient(low=\"blue\",high=\"red\")+       xlab(\"logFC\") + ylab(\"region specific cell type specfic features\" )  ggarrange(plotlist = list(p1,p2))"},{"path":"/articles/breastCancerIMC.html","id":"can-we-identify-the-feature-of-interest-among-each-type-of-feature-category","dir":"Articles","previous_headings":"How do we generate a molecular representation for each individual? > What can we learn from the outputs from scFeatures?","what":"Can we identify the feature of interest among each type of feature category?","title":"Unlocking single cell spatial omics analyses with scdney - IMC","text":"order develop understanding data, important bear mind outcomes derived scFeatures combine several association studies. Hence, necessary examine every separate feature category individual unit study. section presents graphic representation showing visualise distribution features across individuals. following code developed identify retrieve samples associated good poor prognosis. particular step necessary setting focus limited two specific categories individuals rather including samples.","code":"feature <- feature[ grep(\"poor|good\", rownames(feature )),  ]"},{"path":"/articles/breastCancerIMC.html","id":"gene-mean-celltype","dir":"Articles","previous_headings":"How do we generate a molecular representation for each individual? > What can we learn from the outputs from scFeatures? > Can we identify the feature of interest among each type of feature category?","what":"Gene mean celltype","title":"Unlocking single cell spatial omics analyses with scdney - IMC","text":"","code":"feature <- scfeatures_result$gene_mean_celltype feature <- feature[ grep(\"poor|good\", rownames(feature )),  ] # Select the features from HR+ CK7--cell type and in region 5 feature   <- feature[  , grep(  \"HR+ CK7--region5\" , colnames(feature) , fixed=T) ]  plot_boxplot(feature) + ggtitle(\"Protein mean sub-cell type feature\")"},{"path":"/articles/breastCancerIMC.html","id":"gene-mean-bulk","dir":"Articles","previous_headings":"How do we generate a molecular representation for each individual? > What can we learn from the outputs from scFeatures? > Can we identify the feature of interest among each type of feature category?","what":"Gene mean bulk","title":"Unlocking single cell spatial omics analyses with scdney - IMC","text":"","code":"feature <- scfeatures_result$gene_mean_bulk feature <- feature[ grep(\"poor|good\", rownames(feature )),  ] plot_boxplot(feature) + ggtitle(\"Protein mean bulk feature\")"},{"path":"/articles/breastCancerIMC.html","id":"nearest-neighbour-correlation","dir":"Articles","previous_headings":"How do we generate a molecular representation for each individual? > What can we learn from the outputs from scFeatures? > Can we identify the feature of interest among each type of feature category?","what":"Nearest neighbour correlation","title":"Unlocking single cell spatial omics analyses with scdney - IMC","text":"","code":"feature <- scfeatures_result$nn_correlation feature <- feature[ grep(\"poor|good\", rownames(feature )),  ] plot_boxplot(feature) + ggtitle(\"Nearest neighbour correlation feature\")"},{"path":"/articles/breastCancerIMC.html","id":"association-study-report","dir":"Articles","previous_headings":"How do we generate a molecular representation for each individual? > What can we learn from the outputs from scFeatures?","what":"Association study report","title":"Unlocking single cell spatial omics analyses with scdney - IMC","text":"accommodate easier interpretation features, scFeatures contains function run_association_study_report enables user readily visualise explore generated features one line code. used caution depending number cell-types considered, automatically-generated graphics may efficient way interpretation. code perform following tasks: Specify folder store html report. Using function getwd() specify store current working directory. small loop created select samples associated good poor prognosis generate new scfeatures_result. step necessary comparison interest subset data. Run function run_association_study_report()","code":"## Step 1  output_folder <-  getwd()  ## Step 2 scfeatures_result_new <- scfeatures_result for (i in 1:13){   thisfeature <- scfeatures_result[[i]]   thisfeature <- thisfeature[ grep(\"poor|good\", rownames(thisfeature )),  ]   scfeatures_result_new[[i]] <- thisfeature }  ## Step 3 run_association_study_report(scfeatures_result_new, output_folder )"},{"path":"/articles/breastCancerIMC.html","id":"can-we-estimate-recurrence-risk","dir":"Articles","previous_headings":"","what":"Can we estimate recurrence risk?","title":"Unlocking single cell spatial omics analyses with scdney - IMC","text":"Recurrence risk estimation fundamental concern medical research, particularly context patient survival analysis. section, estimate recurrence risk using molecular representation individuals generated scFeatures build survival model. use classifyR build survival model. patient outcome time--event, , default, ClassifyR use Cox proportional hazards ranking choose set features also Cox proportional hazards predict risk scores. also demonstrate available models ClassifyR.","code":""},{"path":"/articles/breastCancerIMC.html","id":"building-a-survival-model","dir":"Articles","previous_headings":"Can we estimate recurrence risk?","what":"Building a survival model","title":"Unlocking single cell spatial omics analyses with scdney - IMC","text":"Recall previous section stored 13 matrices different feature types list. Instead manually retrieving matrix list build separate models, classifyR can directly take list matrices input run repeated cross-validation model matrix individually. , run 5 repeats 5-fold cross-validation. high score indicates prognosis worse outcome lower risk score. Although provided code , save time, just load prepared RDS file classifyr_result_IMC.rds focus interpretation workshop. Cox proportional hazards classical statistical method, opposed machine learning methods like Random survival forest. machine learning methods can build remarkably complex relationships features, however running time can much longer Cox proportional hazards. use feature selection limit number features considered 100 per metafeature save time, can just load prepared RDS file. compare predictive performance methods.","code":"# We use the following variables:      # timeRFS: \"Time to Recurrence-Free Survival.\" It is the time period until recurrence occurs.     # eventRFS: \"Event in Recurrence-Free Survival.\"It indicates whether the event has occurred.     # Breast.Tumour.Laterality: Laterality of tumors, eg, whether the tumor is located in left or right.      # ER.Status: Whether the tumor is ER positive or ER negative.     # Inferred.Menopausal.State: of the patient.     # Grade: of the tumor.    # Size: of the tumor.     usefulFeatures <- c(\"Breast.Tumour.Laterality\", \"ER.Status\", \"Inferred.Menopausal.State\", \"Grade\", \"Size\") nFeatures <- append(list(clinical = 1:3), lapply(scfeatures_result, function(metaFeature) 1:5)) clinicalAndOmics <- append(list(clinical = clinical), scfeatures_result)  ### generate classfyr result  classifyr_result <- crossValidate(clinicalAndOmics, c(\"timeRFS\", \"eventRFS\"),                     extraParams = list(prepare = list(useFeatures = list(clinical = usefulFeatures))),                     nFeatures = nFeatures, nFolds = 5, nRepeats = 5, nCores = 5) classifyr_result <- readRDS(\"~/biocasia_data/classifyr_result_IMC.rds\") nFeatures <- append(list(clinical = 1:3), lapply(scfeatures_result[2:length(scfeatures_result)], function(metaFeature) min(100, ncol(metaFeature)))) survForestCV <- crossValidate(clinicalAndOmics, outcome, nFeatures = nFeatures,                 classifier = \"randomForest\",                 nFolds = 5, nRepeats = 5, nCores = 5) survForestCV <- readRDS(\"~/biocasia_data/survForestCV.RDS\")"},{"path":"/articles/breastCancerIMC.html","id":"visualising-the-model-performance-of-individual-metafeatures","dir":"Articles","previous_headings":"Can we estimate recurrence risk?","what":"Visualising the model performance of individual metafeatures","title":"Unlocking single cell spatial omics analyses with scdney - IMC","text":"examine distribution prognostic performance, use performancePlot. Currently, metric time--event data C-index automatically used predictive model type tracked inside result objects.  Note resultant plot ggplot2 object can modified. code used categorical classifier random forest implementation provided ranger package interface . examine feature selection stability selectionPlot.  Using samplesMetricMap compare per-sample C-index Cox models kinds metafeatures.  samples predicted better metafeatures others. per-sample C-index metric unique ClassifyR. Models feature selection approaches may seen vignette listed available(). Interactive Q&: Q7: highest predictive performance way choose best model can models better reasons?","code":"## Make axis label 45 degree to improve readiability  tilt <- theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))  ## Putting two sets of cross-validation results together multiresults <- append(classifyr_result, survForestCV) ordering <- c(\"clinical\", names(scfeatures_result)) performancePlot(multiresults,                 characteristicsList = list(x = \"Assay Name\",                                             row = \"Classifier Name\"),                 orderingList = list(\"Assay Name\" = ordering)) +                  tilt selectionPlot(multiresults,                 characteristicsList = list(x = \"Assay Name\", row = \"Classifier Name\"),                 orderingList = list(\"Assay Name\" = ordering)) + tilt distribution(classifyr_result[[1]], plot = FALSE) ##      assay                   feature proportion ## 1 clinical Inferred.Menopausal.State          1 library(grid) samplesMetricMap(classifyr_result) ## TableGrob (2 x 1) \"arrange\": 2 grobs ##   z     cells    name                 grob ## 1 1 (2-2,1-1) arrange       gtable[layout] ## 2 2 (1-1,1-1) arrange text[GRID.text.6176]"},{"path":"/articles/breastCancerIMC.html","id":"does-each-individual-require-a-different-collection-of-features","dir":"Articles","previous_headings":"Can we estimate recurrence risk?","what":"Does each individual require a different collection of features?","title":"Unlocking single cell spatial omics analyses with scdney - IMC","text":"Using samplesMetricMap compare per-sample C-index Cox models kinds metafeatures.  Interactive Q&: Q8: spatial features important predicting recurrence? hold individuals?","code":"library(grid) samplesMetricMap(classifyr_result) ## TableGrob (2 x 1) \"arrange\": 2 grobs ##   z     cells    name                 grob ## 1 1 (2-2,1-1) arrange       gtable[layout] ## 2 2 (1-1,1-1) arrange text[GRID.text.6373]"},{"path":[]},{"path":"/articles/breastCancerIMC.html","id":"explanation-of-spatial-features","dir":"Articles","previous_headings":"Appendix","what":"Explanation of spatial features","title":"Unlocking single cell spatial omics analyses with scdney - IMC","text":"L function: L function spatial statistic used assess spatial distribution cell types. assesses significance cell-cell interactions, calculating density cell type cell types within certain radius. High values indicate spatial association, low values indicate spatial avoidance.  Cell type interaction composition: calculate nearest neighbours cell calculate pairs cell types based nearest neighbour. allows us summarise cell type interaction composition.  Moran’s : Moran’s spatial autocorrelation statistic based location values. quantifies whether similar values tend occur near dispersed.  Nearest Neighbor Correlation: metric measures correlation proteins/genes cell nearest neighbour cell.","code":"one_sample  <- data_sce[ , data_sce$metabricId == \"MB-0128\"  ] one_sample <- data.frame( colData(one_sample) )  one_sample$celltype <- one_sample$description  # select certain cell types to examine the interaction  index <-  one_sample$celltype  %in% c(\"B cells\", \"Fibroblasts\") one_sample$celltype[!index] <- \"others\" a <-ggplot( one_sample, aes(x = Location_Center_X , y = Location_Center_Y, colour = celltype )) + geom_point()  + ggtitle( \"Patient MB-0128 - high L value with \\n B cells interacting Fibroblasts\") + scale_colour_manual(values = c(\"coral\" , \"steelblue\" , \"grey70\"))    one_sample$celltype <- one_sample$description index <-  one_sample$celltype  %in% c(\"B cells\", \"HR- CK7-\") one_sample$celltype[!index] <- \"others\" b <- ggplot( one_sample, aes(x = Location_Center_X , y = Location_Center_Y, colour = celltype )) + geom_point()    + ggtitle( \"Patient MB-0128 - low L value with \\n B cells interacting HR_ CK7\")+ scale_colour_manual(values = c(\"coral\" , \"steelblue\" , \"grey70\"))     ggarrange(plotlist = list(a,b)) one_sample  <- data_sce[ , data_sce$metabricId == \"MB-0263\"  ] one_sample <- data.frame( colData(one_sample) )  one_sample$celltype <- one_sample$description   a <-ggplot( one_sample, aes(x = Location_Center_X , y = Location_Center_Y, colour = celltype )) + geom_point()  + scale_colour_tableau()  + ggtitle( \"Patient MB-0263\")   feature  <- scfeatures_result$celltype_interaction to_plot <- data.frame( t( feature[ grep(\"MB-0263\", rownames(feature)) , ])  ) to_plot$feature <- rownames(to_plot)  colnames(to_plot) <- c(\"value\", \"celltype interaction composition\")   to_plot <- to_plot[ to_plot$value > 0.03 , ]  b <- ggplot(to_plot, aes(x = reorder(`celltype interaction composition`, value) ,  y = value, fill=`celltype interaction composition`)) + geom_bar(stat=\"identity\" ) + ylab(\"Major cell type interactions\")  +   theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))   ggarrange(plotlist = list(a,b)) high  <- data_sce[\"Ki67\", data_sce$metabricId == \"MB-0132\"  ] high_meta <- data.frame( colData(high) )  high_meta$expression <- as.vector(logcounts( high))   low  <- data_sce[\"Ki67\",  data_sce$metabricId == \"MB-0249\" ] low_meta <- data.frame( colData(low) ) low_meta$expression <- as.vector(logcounts(low))   a <- ggplot(high_meta, aes(x = Location_Center_X , y = Location_Center_Y, colour =expression)) + geom_point(alpha=0.5) + scale_colour_viridis_c() + ggtitle(\"Patient MB-0132 - high Moran's I in Ki67\")  b <- ggplot(low_meta, aes(x = Location_Center_X , y = Location_Center_Y, colour =expression)) + geom_point(alpha=0.5) + scale_colour_viridis_c() + ggtitle(\"Patient MB-0249 - low Moran's I in Ki67\")  ggarrange(plotlist = list(a,b)) plot_nncorrelation <- function(thissample , thisprotein){            sample_name <- thissample        thissample <- data_sce[, data_sce$metabricId ==     sample_name]                   exprsMat <- logcounts(thissample)           # calculate NN correlation      cell_points_cts <- spatstat.geom::ppp(             x = as.numeric(thissample$Location_Center_X ), y = as.numeric(thissample$Location_Center_Y),             check = FALSE,             xrange = c(                 min(as.numeric(thissample$Location_Center_X)),                 max(as.numeric(thissample$Location_Center_X))             ),             yrange = c(                 min(as.numeric(thissample$Location_Center_Y)),                 max(as.numeric(thissample$Location_Center_Y))             ),             marks = t(as.matrix(exprsMat))         )           value <-  spatstat.explore::nncorr(cell_points_cts)[\"correlation\", ]       value <-  value[  thisprotein]           # Find the indices of the two nearest neighbors for each cell     nn_indices <- nnwhich(cell_points_cts, k = 1)          protein <-  thisprotein     df <- data.frame(thiscell_exprs  = exprsMat[protein, ] , exprs =  exprsMat[protein,nn_indices ])         p <-  ggplot(df, aes( x =thiscell_exprs ,  y = exprs , colour =  exprs  )) +       geom_point(alpha = 0.3) + ggtitle(paste0( \"Patient \", sample_name ,  \" nn_corr = \" ,  round(value, 2)  )) + scale_colour_viridis_c() + xlab(\"This cell expression\") + ylab(\"Neighbouring cell expression\")        return (p )   }       p1 <- plot_nncorrelation(\"MB-0605\",  \"HER2\") p2 <- plot_nncorrelation(\"MB-0258\",  \"HER2\")  ggarrange(plotlist = list(p1, p2))"},{"path":"/articles/breastCancerIMC.html","id":"sessioninfo","dir":"Articles","previous_headings":"Appendix","what":"SessionInfo","title":"Unlocking single cell spatial omics analyses with scdney - IMC","text":"","code":"sessionInfo() ## R version 4.3.1 (2023-06-16) ## Platform: x86_64-pc-linux-gnu (64-bit) ## Running under: Debian GNU/Linux 12 (bookworm) ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  ## LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.21.so;  LAPACK version 3.11.0 ##  ## locale: ##  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        ##  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    ##  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           ## [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    ##  ## time zone: Australia/Sydney ## tzcode source: system (glibc) ##  ## attached base packages: ## [1] grid      stats4    stats     graphics  grDevices utils     datasets  ## [8] methods   base      ##  ## other attached packages: ##  [1] reshape_0.8.9               scran_1.28.1                ##  [3] scater_1.28.0               scuttle_1.10.1              ##  [5] spatstat_3.0-6              spatstat.linnet_3.1-1       ##  [7] spatstat.model_3.2-8        rpart_4.1.21                ##  [9] spatstat.explore_3.2-5      nlme_3.1-163                ## [11] spatstat.random_3.2-1       spatstat.geom_3.2-7         ## [13] spatstat.data_3.0-3         survminer_0.4.9             ## [15] ggpubr_0.6.0                tidyr_1.3.0                 ## [17] scattermore_1.2             plotly_4.10.3               ## [19] limma_3.56.2                dplyr_1.1.3                 ## [21] spicyR_1.12.0               ggthemes_4.2.4              ## [23] lisaClust_1.9.2             ClassifyR_3.5.21            ## [25] survival_3.5-7              BiocParallel_1.34.2         ## [27] MultiAssayExperiment_1.26.0 generics_0.1.3              ## [29] scFeatures_0.99.27          ggplot2_3.4.4               ## [31] SingleCellExperiment_1.22.0 SummarizedExperiment_1.30.2 ## [33] Biobase_2.60.0              GenomicRanges_1.52.0        ## [35] GenomeInfoDb_1.36.1         IRanges_2.34.1              ## [37] S4Vectors_0.38.1            BiocGenerics_0.46.0         ## [39] MatrixGenerics_1.12.2       matrixStats_1.0.0           ##  ## loaded via a namespace (and not attached): ##   [1] fs_1.6.3                   ProtGenerics_1.32.0        ##   [3] GSVA_1.48.2                spatstat.sparse_3.0-3      ##   [5] bitops_1.0-7               httr_1.4.7                 ##   [7] RColorBrewer_1.1-3         numDeriv_2016.8-1.1        ##   [9] EnsDb.Hsapiens.v79_2.99.0  tools_4.3.1                ##  [11] backports_1.4.1            DT_0.30                    ##  [13] utf8_1.2.4                 R6_2.5.1                   ##  [15] HDF5Array_1.28.1           mgcv_1.9-0                 ##  [17] lazyeval_0.2.2             rhdf5filters_1.12.1        ##  [19] withr_2.5.1                gridExtra_2.3              ##  [21] prettyunits_1.2.0          cli_3.6.1                  ##  [23] textshaping_0.3.7          labeling_0.4.3             ##  [25] sass_0.4.7                 survMisc_0.5.6             ##  [27] SingleCellSignalR_1.12.0   pkgdown_2.0.7              ##  [29] Rsamtools_2.16.0           systemfonts_1.0.5          ##  [31] ggupset_0.3.0              R.utils_2.12.2             ##  [33] rstudioapi_0.15.0          RSQLite_2.3.1              ##  [35] shape_1.4.6                BiocIO_1.10.0              ##  [37] crosstalk_1.2.0            gtools_3.9.4               ##  [39] car_3.1-2                  scam_1.2-14                ##  [41] Matrix_1.6-1.1             ggbeeswarm_0.7.2           ##  [43] fansi_1.0.5                abind_1.4-5                ##  [45] R.methodsS3_1.8.2          lifecycle_1.0.3            ##  [47] yaml_2.3.7                 edgeR_3.42.4               ##  [49] carData_3.0-5              gplots_3.1.3               ##  [51] rhdf5_2.44.0               BiocFileCache_2.8.0        ##  [53] Rtsne_0.16                 blob_1.2.4                 ##  [55] promises_1.2.1             dqrng_0.3.1                ##  [57] crayon_1.5.2               lattice_0.22-5             ##  [59] cowplot_1.1.1              beachmat_2.16.0            ##  [61] msigdbr_7.5.1              GenomicFeatures_1.52.1     ##  [63] annotate_1.78.0            KEGGREST_1.40.0            ##  [65] magick_2.8.1               pillar_1.9.0               ##  [67] knitr_1.44                 metapod_1.8.0              ##  [69] boot_1.3-28.1              rjson_0.2.21               ##  [71] codetools_0.2-19           glue_1.6.2                 ##  [73] V8_4.4.0                   data.table_1.14.8          ##  [75] vctrs_0.6.4                png_0.1-8                  ##  [77] gtable_0.3.4               cachem_1.0.8               ##  [79] xfun_0.40                  S4Arrays_1.0.6             ##  [81] mime_0.12                  pheatmap_1.0.12            ##  [83] iterators_1.0.14           KMsurv_0.1-5               ##  [85] statmod_1.5.0              bluster_1.10.0             ##  [87] ellipsis_0.3.2             bit64_4.0.5                ##  [89] progress_1.2.2             filelock_1.0.2             ##  [91] rprojroot_2.0.3            bslib_0.5.1                ##  [93] irlba_2.3.5.1              vipor_0.4.5                ##  [95] KernSmooth_2.23-22         colorspace_2.1-0           ##  [97] DBI_1.1.3                  tidyselect_1.2.0           ##  [99] proxyC_0.3.4               bit_4.0.5                  ## [101] compiler_4.3.1             curl_5.0.2                 ## [103] AUCell_1.22.0              graph_1.78.0               ## [105] BiocNeighbors_1.18.0       xml2_1.3.5                 ## [107] desc_1.4.2                 DelayedArray_0.26.6        ## [109] rtracklayer_1.60.0         scales_1.2.1               ## [111] caTools_1.18.2             rappdirs_0.3.3             ## [113] SpatialExperiment_1.11.2   stringr_1.5.0              ## [115] digest_0.6.33              goftest_1.2-3              ## [117] minqa_1.2.6                spatstat.utils_3.0-4       ## [119] rmarkdown_2.25             XVector_0.40.0             ## [121] htmltools_0.5.6.1          pkgconfig_2.0.3            ## [123] lme4_1.1-34                sparseMatrixStats_1.12.2   ## [125] dbplyr_2.4.0               fastmap_1.1.1              ## [127] ensembldb_2.24.0           htmlwidgets_1.6.2          ## [129] rlang_1.1.1                GlobalOptions_0.1.2        ## [131] shiny_1.7.5.1              DelayedMatrixStats_1.22.1  ## [133] farver_2.1.1               jquerylib_0.1.4            ## [135] zoo_1.8-12                 jsonlite_1.8.7             ## [137] R.oo_1.25.0                BiocSingular_1.16.0        ## [139] RCurl_1.98-1.12            magrittr_2.0.3             ## [141] GenomeInfoDbData_1.2.10    Rhdf5lib_1.22.0            ## [143] munsell_0.5.0              Rcpp_1.0.11                ## [145] viridis_0.6.4              ape_5.7-1                  ## [147] babelgene_22.9             stringi_1.7.12             ## [149] zlibbioc_1.46.0            MASS_7.3-60                ## [151] plyr_1.8.9                 ggrepel_0.9.4              ## [153] parallel_4.3.1             deldir_1.0-9               ## [155] Biostrings_2.68.1          splines_4.3.1              ## [157] tensor_1.5                 multtest_2.56.0            ## [159] hms_1.1.3                  circlize_0.4.15            ## [161] locfit_1.5-9.8             igraph_1.5.1               ## [163] ggsignif_0.6.4             reshape2_1.4.4             ## [165] biomaRt_2.56.1             ScaledMatrix_1.8.1         ## [167] XML_3.99-0.14              evaluate_0.22              ## [169] RcppParallel_5.1.7         BiocManager_1.30.22        ## [171] nloptr_2.0.3               tweenr_2.0.2               ## [173] foreach_1.5.2              httpuv_1.6.12              ## [175] EnsDb.Mmusculus.v79_2.99.0 purrr_1.0.2                ## [177] polyclip_1.10-6            km.ci_0.5-6                ## [179] ggforce_0.4.1              rsvd_1.0.5                 ## [181] broom_1.0.5                xtable_1.8-4               ## [183] restfulr_0.0.15            AnnotationFilter_1.24.0    ## [185] rstatix_0.7.2              later_1.3.1                ## [187] viridisLite_0.4.2          class_7.3-22               ## [189] ragg_1.2.6                 tibble_3.2.1               ## [191] lmerTest_3.1-3             beeswarm_0.4.0             ## [193] memoise_2.0.1              AnnotationDbi_1.62.2       ## [195] GenomicAlignments_1.36.0   cluster_2.1.4              ## [197] concaveman_1.1.0           GSEABase_1.62.0"},{"path":"/articles/breastCancerIMC.html","id":"acknowledgment","dir":"Articles","previous_headings":"Appendix","what":"Acknowledgment","title":"Unlocking single cell spatial omics analyses with scdney - IMC","text":"authors thank colleagues, particularly University Sydney, Sydney Precision Data Science Charles Perkins Centre support intellectual engagement. Special thanks Ellis Patrick, Shila Ghazanfar, Andy Tran guiding supporting building workshop.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Sydney Precision Bioinformatics Alliance. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Sydney Precision Bioinformatics Alliance (2023). BiocAsia2023: Disease outcome prediction using scdney. R package version 0.1.0.","code":"@Manual{,   title = {BiocAsia2023: Disease outcome prediction using scdney},   author = {{Sydney Precision Bioinformatics Alliance}},   year = {2023},   note = {R package version 0.1.0}, }"},{"path":"/index.html","id":"unlocking-single-cell-and-spatial-analysis-with-scdney","dir":"","previous_headings":"","what":"Disease outcome prediction using scdney","title":"Disease outcome prediction using scdney","text":"Data can accessed dropbox: https://www.dropbox.com/scl/fi/6icd5vix870uoffv9p3zb/data.zip?rlkey=hu1tvpbdg0msykrud05hbclj6&st=2qbsk235&dl=0","code":""},{"path":"/reference/hello.html","id":null,"dir":"Reference","previous_headings":"","what":"Hello, World! — hello","title":"Hello, World! — hello","text":"Prints 'Hello, world!'.","code":""},{"path":"/reference/hello.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hello, World! — hello","text":"","code":"hello()"},{"path":"/reference/hello.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hello, World! — hello","text":"","code":"hello() #> [1] \"Hello, world!\""}]
